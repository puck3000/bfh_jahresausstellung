{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/puck3000/Sites/bfh/site/web/pages/projects/[slug].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport groq from 'groq';\nimport BlockContent from '@sanity/block-content-to-react';\nimport imageUrlBuilder from '@sanity/image-url';\nimport client from '../../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Project = props => {\n  const {\n    title = 'Missing title',\n    atelierName = 'Atelier fehlt',\n    referencepic,\n    content = [],\n    gallery\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Titel: \", title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Das Projekt \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 22\n      }, this), \" ist Teil des Atelier \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: atelierName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 64\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), referencepic && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"referencepic:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: urlFor(referencepic).width(500).url()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(BlockContent, _objectSpread({\n      blocks: content,\n      imageOptions: {\n        w: 320,\n        h: 240,\n        fit: 'max'\n      }\n    }, client.config()), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), gallery && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Gallery:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: console.log(slides)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\nconst query = groq`*[_type == \"projekt\" && slug.current == $slug][0]\n    {\n      title, \n      \"atelierName\": atelier->title,\n      \"referencepic\": referencepic,\n      content,\n      \"gallery\": gallery \n      \"slides\": gallery[].slide.pic\n    }\n  `;\n\nProject.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const {\n    slug = \"\"\n  } = context.query;\n  return await client.fetch(query, {\n    slug\n  });\n};\n\nexport default Project;","map":{"version":3,"sources":["/home/puck3000/Sites/bfh/site/web/pages/projects/[slug].js"],"names":["groq","BlockContent","imageUrlBuilder","client","urlFor","source","image","Project","props","title","atelierName","referencepic","content","gallery","width","url","w","h","fit","config","console","log","slides","query","getInitialProps","context","slug","fetch"],"mappings":";;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOH,eAAe,CAACC,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,MAAME,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAM;AACJC,IAAAA,KAAK,GAAG,eADJ;AAEJC,IAAAA,WAAW,GAAG,eAFV;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,OAAO,GAAG,EAJN;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAQA,sBACE;AAAA,4BACE;AAAA,4BAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8CAAe;AAAA,kBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,cAAf,yCAAyD;AAAA,kBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,cAAzD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAIIC,YAAY,iBACV;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AACE,QAAA,GAAG,EAAEP,MAAM,CAACO,YAAD,CAAN,CACFG,KADE,CACI,GADJ,EAEFC,GAFE;AADP;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YALN,eAeE,QAAC,YAAD;AACE,MAAA,MAAM,EAAEH,OADV;AAEE,MAAA,YAAY,EAAE;AAAEI,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,GAAG,EAAE;AAAvB;AAFhB,OAGMf,MAAM,CAACgB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA,YAfF,EAoBGN,OAAO,iBACN;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEF;AAAA,kBAAIO,OAAO,CAACC,GAAR,CAAYC,MAAZ;AAAJ;AAAA;AAAA;AAAA;AAAA,cAFE;AAAA;AAAA;AAAA;AAAA;AAAA,YArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAtCD;;AAwCA,MAAMC,KAAK,GAAGvB,IAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GATA;;AAYAO,OAAO,CAACiB,eAAR,GAA0B,gBAAeC,OAAf,EAAwB;AAC9C;AACA,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAgBD,OAAO,CAACF,KAA9B;AACA,SAAO,MAAMpB,MAAM,CAACwB,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,IAAAA;AAAF,GAApB,CAAb;AACD,CAJH;;AAMA,eAAenB,OAAf","sourcesContent":["import groq from 'groq'\nimport BlockContent from '@sanity/block-content-to-react' \nimport imageUrlBuilder from '@sanity/image-url'\nimport client from '../../client'\n\nfunction urlFor (source) {\n  return imageUrlBuilder(client).image(source)\n}\n\nconst Project = (props) => {\n  const { \n    title = 'Missing title', \n    atelierName = 'Atelier fehlt', \n    referencepic,\n    content = [],\n    gallery\n  } = props\n    \n  return (\n    <article>\n      <h2>Titel: {title}</h2>\n      <p>Das Projekt <span>{title}</span> ist Teil des Atelier <span>{atelierName}</span>.</p>\n      {\n        referencepic && (\n          <div>\n          <h3>referencepic:</h3>\n          <img\n            src={urlFor(referencepic)\n              .width(500)\n              .url()}\n          />\n        </div>\n        )\n      }\n      <BlockContent\n        blocks={content}\n        imageOptions={{ w: 320, h: 240, fit: 'max' }}\n        {...client.config()}\n      />\n      {gallery && (\n        <div>\n          <h3>Gallery:</h3>\n      <p>{console.log(slides)}</p>\n        </div>\n      )}\n    </article>\n  )\n}\n\nconst query = groq `*[_type == \"projekt\" && slug.current == $slug][0]\n    {\n      title, \n      \"atelierName\": atelier->title,\n      \"referencepic\": referencepic,\n      content,\n      \"gallery\": gallery \n      \"slides\": gallery[].slide.pic\n    }\n  `\n\n\nProject.getInitialProps = async function(context) {\n    // It's important to default the slug so that it doesn't return \"undefined\"\n    const { slug = \"\" } = context.query\n    return await client.fetch(query, { slug })\n  }\n\nexport default Project"]},"metadata":{},"sourceType":"module"}