{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/puck3000/Sites/bfh/site/web/pages/projects/[slug].js\",\n    _this = this;\n\nimport client from '../../client';\n\nvar Project = function Project(props) {\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.slug.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Project;\n\nProject.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // It's important to default the slug so that it doesn't return \"undefined\"\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"\" : _context$query$slug;\n            _context.next = 3;\n            return client.fetch(\"\\n      *[_type == \\\"projekt\\\" && slug.current == $slug][0]\\n    \", {\n              slug: slug\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/home/puck3000/Sites/bfh/site/web/pages/projects/[slug].js"],"names":["client","Project","props","slug","current","getInitialProps","context","query","fetch"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,cAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAEzB,sBACE;AAAA,2BACE;AAAA,gBAAKA,KAAK,CAACC,IAAN,CAAWC;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAPD;;KAAMH,O;;AASNA,OAAO,CAACI,eAAR;AAAA,sEAA0B,iBAAeC,OAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtB;AADsB,kCAEAA,OAAO,CAACC,KAFR,CAEdJ,IAFc,EAEdA,IAFc,oCAEP,EAFO;AAAA;AAAA,mBAGTH,MAAM,CAACQ,KAAP,sEAEV;AAAEL,cAAAA,IAAI,EAAJA;AAAF,aAFU,CAHS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeF,OAAf","sourcesContent":["import client from '../../client'\n\nconst Project = (props) => {\n    \n  return (\n    <article>\n      <h2>{props.slug.current}</h2>\n    </article>\n  )\n}\n\nProject.getInitialProps = async function(context) {\n    // It's important to default the slug so that it doesn't return \"undefined\"\n    const { slug = \"\" } = context.query\n    return await client.fetch(`\n      *[_type == \"projekt\" && slug.current == $slug][0]\n    `, { slug })\n  }\n\nexport default Project"]},"metadata":{},"sourceType":"module"}